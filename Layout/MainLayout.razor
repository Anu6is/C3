@inherits LayoutComponentBase

@inject WarSession WarSession
@inject TornApiService ApiService
@inject ProtectedTokenStore TokenStore
@inject BrowserStorageService SessionStore;

<MudThemeProvider IsDarkMode="true" Theme="@Theme"/>
<MudSnackbarProvider/>

<MudLayout>
    <Conditional Expression="@(CurrentUser is not null)" When="_initialized">
        <TrueContent>
            <WarData CurrentUser="@CurrentUser" WarSession="@WarSession" OnWarEnded="@WarEnded">
                <AppBar Username="@CurrentUser!.Username" FactionName="@CurrentUser!.Faction.Faction_Name" 
                        WarId="@WarSession.WarId" StartTime="@WarSession.StartTime" Winner="@Winner" />
                <MudMainContent Style="height:100vh;">
                    <MudContainer Class="mt-4" MaxWidth="MaxWidth.Large">
                        @Body
                    </MudContainer>
                </MudMainContent>
            </WarData>
        </TrueContent>
        <FalseContent>
            <SignIn OnSuccess="@SuccessfulSignin" />
        </FalseContent>
    </Conditional>
</MudLayout>

@code{
    private bool _initialized;
    private string? Winner { get; set; }
    private ApplicationUser? CurrentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await GetCurrentUserAsync();

        _initialized = true;

        await base.OnInitializedAsync();
    }

    private async Task<ApplicationUser?> GetCurrentUserAsync()
    {
        WarSession = await SessionStore.GetUserSessionAsync();

        if (WarSession.EncryptedToken is null) return null;

        var token = await TokenStore.RefreshTokenAsync(WarSession.EncryptedToken);

        if (token is null) return null;

        var user = await ApiService.GetCurrentUserAsync();

        if (user?.Name is null) return null;

        return new ApplicationUser(user!.Player_Id, user!.Name, user!.Faction, new(user.Strength, user.Defense, user.Speed, user.Dexterity), token)
        {
            State = user.Status,
            ActivityStatus = user.Last_Action
        };
    }

    private void SuccessfulSignin(ApplicationUser user)
    {
        WarSession.EncryptedToken = ProtectedTokenStore.EncryptedToken;
        CurrentUser = user;
    }

    private void WarEnded(string winner) => Winner = winner;

    private MudTheme Theme { get; } = new() 
    { 
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Grey.Darken2,
            Secondary = Colors.Grey.Darken3
        }
    };
}