@inject TornApiService ApiService
@inject TornStatsApiService StatsService
@inject BrowserStorageService BrowserStore

<CascadingValue Value="@this">
    <Conditional Expression="@_initialized">
        <TrueContent>
            <Conditional Expression="@(UserFaction?.Ranked_Wars.Count != 0)">
                <TrueContent>
                    @ChildContent
                </TrueContent>
                <FalseContent>
                    <MudContainer Class="d-flex flex-column justify-center" MaxWidth="MaxWidth.Small" Style="height:100vh;">
                        <MudCard Class="pa-8" Elevation="2">
                            <MudCardContent Class="d-flex justify-center">
                                <MudText Style="text-align:center" Typo="Typo.h3">YOUR FACTION IS NOT IN A WAR</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudContainer>
                </FalseContent>
            </Conditional>
        </TrueContent>
        <FalseContent>
            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="4" Style="width:100%; height:80vh">
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            </MudStack>
        </FalseContent>
    </Conditional>
</CascadingValue>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [EditorRequired][Parameter] public EventCallback<string> OnWarEnded { get; set; }
    [EditorRequired][Parameter] public required ApplicationUser? CurrentUser { get; set; }
    [EditorRequired][Parameter] public required WarSession WarSession { get; set; }

    private bool _initialized;
    private PeriodicTimer Timer = new PeriodicTimer(TimeSpan.FromSeconds(5));

    public TornFaction? UserFaction { get; set; }
    public TornFaction? RivalFaction { get; set; }
    public Dictionary<int, Spy> Spies { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await GetWarDetailsAsync();

        await base.OnInitializedAsync();
    }

    private async Task GetWarDetailsAsync()
    {
        var factionId = CurrentUser!.Faction.Faction_Id;

        UserFaction = await ApiService.GetFactionAsync(factionId);

        if (UserFaction!.Ranked_Wars.Count == 0)
        {
            Timer.Dispose();
        }
        else
        {
            var war = UserFaction!.Ranked_Wars.First();

            WarSession.WarId = war.Key;
            WarSession.StartTime = war.Value.War.Start;

            var filterOptions = await BrowserStore.GetFilterOptionsAsync();

            if (filterOptions is not null)
            {
                if (filterOptions.WarId != war.Key)
                {
                    await BrowserStore.DeleteFilterOptionsAsync();
                }
                else
                {
                    WarSession.FactionTargets = filterOptions.Targets;
                    C3.Models.CustomFilterOptions.FromCache(filterOptions);
                }
            }

            await BrowserStore.SaveSessionAsync(WarSession);
        }

        _initialized = true;

        StateHasChanged();
    }

    public async Task MonitorWarProgressAsync()
    {
        var rivalId = UserFaction!.Ranked_Wars.First().Value.Factions.First(x => x.Key != UserFaction.Id).Key;

        var spies = await StatsService.GetFactionSpiesAsync(rivalId);

        if (spies is not null && spies.Status is true)
            Spies = spies.Faction.Members.Values.ToDictionary(member => member.Id, member => member.Spy);

        while (await Timer.WaitForNextTickAsync())
        {
            RivalFaction = await ApiService.GetFactionAsync(rivalId);

            if (RivalFaction!.Ranked_Wars.First().Value.War.End > 0) Timer.Dispose();

            StateHasChanged();
        }
    }
}
