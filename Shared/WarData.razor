@inject TornApiService ApiService
@inject BrowserStorageService BrowserStore

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [EditorRequired][Parameter] public required ApplicationUser? CurrentUser { get; set; }
    [EditorRequired][Parameter] public required WarSession WarSession { get; set; }

    private Task _monitor = null!;
    private PeriodicTimer Timer = new PeriodicTimer(TimeSpan.FromSeconds(5));

    public TornFaction? UserFaction { get; set; }
    public TornFaction? RivalFaction { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _monitor = MonitorWarProgressAsync();

        await base.OnInitializedAsync();
    }

    private async Task MonitorWarProgressAsync()
    {
        var factionId = CurrentUser!.Faction.Faction_Id;

        while (await Timer.WaitForNextTickAsync())
        {
            UserFaction = await ApiService.GetFactionAsync(factionId);

            if (UserFaction is null) return;

            if (UserFaction.Ranked_Wars.Count != 0)
            {
                var rivalId = UserFaction.Ranked_Wars.First().Value.Factions.First(x => x.Key != factionId).Key;

                RivalFaction = await ApiService.GetFactionAsync(rivalId);
            }

            if (WarSession.StartTime == 0)
            {
                WarSession.StartTime = UserFaction!.Ranked_Wars.First().Value.War.Start;
                await BrowserStore.SaveSessionAsync(WarSession);
            }

            StateHasChanged();
        }
    }
}
